git config --global user.email "salvadormuntane@gmail.com" 
git config --global user.name "badorius" 
git version
git init ->crear repo git
git status -> ver que ficheros gestiona git
git add index index.html -> lo pasamos a stageing area, faltara el commit
git status -> para ver index.html en stageing
git commit -m " add index.html" 
#hacemos cambios en el index.html
git status -> veremos que hemos modificado el index.html (tambien lo veremos en el editor)
git add index.html
git commit -m "Aadido el contenido del blog" 
git log -> vemos los dos commits realizados y el que esta activo en el master
git checkout f1daaa3256fff3d246f1a3528ac583309c3fbd33 -> para volver a la version anterior (cogiengo el hash de git log) nos muestra un warging de deatached HEAD
git checkout b69178081f1f594e4603c52b47d31a10ac2d8f4a -> volvemos a la ultima, veremos que el texto en el editor se nos actualiza
git checkout master -> esto nos devuelve al ultimo commit que hemos realizado y dejamos de estar de deatached HEAD. Mas adelante veremos las ramas.

#Como deshacer cambios, no me gusta el ultimo cambio y buscamos una manera mejor de haccerlo
git reset f1daaa -> eliminamos el commit que no queremos, lo revisamos con un git log
git log
git add index.html
git status -> veremos que el index.html ha estado modificado.
git commit -m "Contenido del blog"  -> hacemos el commit con el nuevo cambio 
git log -> lo verificamos
git reset --hard f1daaa -> A diferencia del anterior, este lo elimina de manera definitva todos los cambios del hash en adelante, es cuando lo realizado ya no se quiere.
#recreamos el index.html con el contenido correcto y luego
git add index.html
git commit -m " Contenido del blog" 
git log --oneline -> para que lo muestre en una sola linea


#borramos por error un fichero gestionado con el git (rm index.html) no perdemos nada si no hacemos git reset --hard
git status -> veremos que hemos eliminado el index.html
git restore index.html-> restauramos el fichero index.html
#Todos los archivos y carpetas estan en la carpeta .git

#Aadimos mas ficheros, populamos el fichero style.css y hacemos cambios en el index.html i la img
git add . -> metemos todo el directorio actual en stageing area
git commit -m "Create Navbar"

#Subir contenido en github (se puede subir por ssh o https)
git remote add origin git@github.com:badorius/curso-git.git
git remote -v -> de donde podemos descargar (fetch) o subir (push)
git branch -M main -> cambiar el nombre de la rama, por ahora lo dejaremos como master

#crear claves ssh antes de hacer el push
ssh-keygen -t ed25519 -C "salvadormuntane@gmail.com" (generamos clave publica y privada) en setings de github, subimos la pub
git push -u origin master -> esto solo la primera vez, las siguientes git push 

####como crear ramas, si hay varias personas trabajando en el mismo proyecto, no es buena idea trabajar en la rama principal (master) creamos una bifurcación en la rama principal (master o main) 
####cada uno trabaja en una rama y al final se mezclan las ramas en el master, es mas facil para solucionar conflictos.

git checkout -b feature-posts-styles -> Al igual que antes utilizábamos el checkout para volver a un commit anterior, ahora lo utilizaremos para crear una nueva rama
git branch -> veremos en que rama estamos, en el editor también en la barra inferior.

###Realizamos cambios en el index.html y sytle.css, una vez realizados los cambios, al estar en la rama feature-posts-styles
git status -> revisamos los cambios
git add index.html
git commit -m "Add post html"
git add style.css
git commit -m "Add post style"
#Podriamos añadir los dos ficheros a la vez y realizar un único commit, pero de esta forma lo hacemos más granular.
#aquí hemos finalizado la rama, ahora hay que añadir nuestra rama al master
git log --oneline
#ahora hemos creado una rama en local, pero hay que crearla en github, con esto creamos y subimos la nueva rama
git push -u origin feature-posts-styles
#Tanto en github como en el vscode podremos ver la nueva rama todos los cambios, si cambiamos a la rama master no veremos los cambios de la nueva rama
git checkout master ->cambiamos a master y no vemos los cambios de la rama feautre-posts-estyles
git checkout feature-posts-styles -> cambiamos de nuevo a la rama feature-posts-styles

#En git hub ya nos muestra una alarma de que existe una rama con la opción de compare & pull request.
#Ahora realizaremos otro clone, para simular otra persona trabajando en otra rama. La ruta la copiamos del botón code->ssh de github

git clone git@github.com:badorius/curso-git.git persona-backend

#Volvemos a la rama master y creamos un README.md Antes hacemos los add, commit y push
git add notes.txt 
git status
git commit -m "Add post notes.v3"
git push -u origin feature-posts-styles
git checkout master

#creamos un fichero READM.md y lo populamos, (sintaxis markdown) hacemos add, commit y push, podemos ver el readme en el git. Ahora tenemos modificaciones diferentes en las dos ramas, hasta que no las mezclemos.
#para hacer el merge en github click con compare & pull request le damos un título y creamos el pull request. confirmamos el cambio 

git checkout master
git pull -> hemos descargado los cambios merged en local.

######mezclar rams en local
#Cada vez se nos asigna una tarea, normalmente crearemos una rama nueva y luego haremos el merge.
git checkout -b feature-adds
#modificamos el html
git add .
git commit -m "Add advertisment html"
#Ahora nos damos cuenta que esta nueva rama, será muy complicada y tendremos muchos commits, hacemos una nueva rama dentro de esta ultima


git checkout -b feature-load-adds-from-api
#creamos el index.js y hacemos el commit
git add .
git commit -m "Create load adds function"
#estas ramas solo existen en local, no estan en el gi, a no ser que hagamos un push -u origin $NOMBRE_RAMA
#mezclamos la rama de publicidad y su subrama en local, volvemos a la rama anterior con
git checkout feature-adds
#Una vez en la rama feauture-adds, meclamos la rama en la que estamos con la anterior con feature-load-adds-from-api
git merge feature-load-adds-from-api
#ahora mezclamos todo en github
#Lo podemos subir/crear la rama feature-adds en github y luego hacer el merge en master
git push -u origin feature-adds
#O podriamos pasar en local a master, hacer el merge y luego hacer un push del master
git checkout master
git merge feature-adds

git log --oneline
git log --graph --oneline #vemos los logs de las ramas/tareas

#Un ejemplo, te dan una tarea de backend y  frontend, creas una rama de master de backend y en local creas unasubrama de frontend
#en loccal vas trabajando en una rama, vas cambiando y luego trabajas en otra y cuando las tienes completadas, haces un merge del backend y frontend
#y solo haces un push de una rama para luego hacer un unico merge en el master de tu tarea frontend/backend.


#Como hacer un fork y añadir cambios
#Se puede contribuir a un proyecto open source, descargar un proyecto
#se hace un fork de un repositorio a tu git hub, subir los cambios a tu github y cuando este listo, hacer un merge de tu github a otro repositorio.
#Simularemos un forkk con el mismo git de cursogit
#Vamos a github https://github.com/mastermindac/curso-git, proyecto curso-git y le damos a fork, seleccionamos nuestra cuenta.
#como hacemos cambios en este fork, copiamos el enlace ssh y hacemos un git clone 
#vamos al index.js y ponemos un comentario //video pull request
git clone git@github.com:badorius/curso-git-1.git
#hacemos la modificacion en el index.js y creamos una rama
git checkout -b feature-video-pull-request
git add .
git commit -m "Video pull requesst"
#lo subimos, pero hay que crear la rama en remoto
#si te clonas un repositorio, tiene ya el origin predefinido, lo podemos ver con git remote -v
#como ya tenemos el origin, lo subimos al origin
git push -u origin feature-video-pull-request 
#Ahora en github nos vamos a contribute open pull request, ahí seleccionamos el origen destino, en este caso orgine nuestra rama que haremos merge a la master de mastermindac
#En entornos profesionales, normalmente la rama master es el codigo que hay en producción la que hay en los servidores, luego puede existir, la dev, test, etc.c..

#Como resolver conflictos
#Con un supuesto bug, vamos a issues y creamos un issue Titulo bug... comentarios...
#para resolver el bug, primero siempre un pull para actualizar todos los cambios
git pull
git checkout -b bugfix-2-curso-git -> el numero 2 corresponde al ide de issue en github
#Que pasa si otra persona al mismo tiempo decide arreglar este bug.
git clone git@github.com:badorius/curso-git.git persona2-curso-git
git checkout -b bugfix-2-curso-git-persona2